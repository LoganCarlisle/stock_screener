import time
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import yfinance as yf
import numpy as np
from sklearn.linear_model import LinearRegression

options = webdriver.ChromeOptions()
s = ChromeService(executable_path='C:\\Users\\logan\\OneDrive\\Desktop\\selenium\\chromedriver-win64\\chromedriver.exe')
driver = webdriver.Chrome(service=s, options=options)

driver.get('https://stockanalysis.com/markets/gainers/week')


def scrape_stocks(page_source):
    soup = BeautifulSoup(page_source, 'html.parser')
    stock_cells = soup.find_all('td', class_="sym svelte-eurwtr")
    stocks = []
    for stock in stock_cells:
        link_tag = stock.find('a')
        if link_tag:
            ticker = link_tag.text
            stocks.append(ticker)
    return stocks

all_stocks = []

initial_page = driver.page_source
all_stocks.extend(scrape_stocks(initial_page))

for i in range(3):  # Assuming you want to click the button 3 times
    # Wait for the button to be clickable
    button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, '/html/body/div/div[1]/div[2]/main/nav[3]/button[2]'))
    )
    button.click()

    time.sleep(5)  # Adjust as necessary

    updated_page = driver.page_source

    all_stocks.extend(scrape_stocks(updated_page))

driver.quit()

def get_historical_data(ticker, period='1y'):
    try:
        stock_data = yf.Ticker(ticker)
        hist = stock_data.history(period='1y')  # Fetch 1 year of historical data

        # Check if 1 year of data is available
        if hist is not None and not hist.empty:
            return hist

        # If not available, try to fetch 6 months of historical data
        hist = stock_data.history(period='6mo')  # Fetch 6 months of historical data
        if hist is not None and not hist.empty:
            return hist

    except Exception as e:
        print(f"Error fetching data for {ticker}: {e}")

    return None  # Return None if no data could be fetched

def has_negative_trend(stock_data, slope_threshold=-0.1, price_decrease_threshold=-0.05):
    if stock_data is not None and not stock_data.empty:
        # Prepare data for regression (index is time, Close prices are the target)
        X = np.arange(len(stock_data)).reshape(-1, 1)  # Time steps
        y = stock_data['Close'].values

        if np.isnan(y).any():
            return False  
        model = LinearRegression().fit(X, y)


        slope = model.coef_[0]

        if slope > slope_threshold:
            return False

        start_price = y[0]
        end_price = y[-1]
        percentage_change = (end_price - start_price) / start_price

        # Ensure percentage decrease is more negative than the threshold
        if percentage_change <= price_decrease_threshold:
            return True

    return False

negative_trend_stocks = []

for ticker in all_stocks:
    print(f"Fetching historical data for {ticker}...")
    historical_data = get_historical_data(ticker)

    if historical_data is not None and has_negative_trend(historical_data):
        # Get the latest closing price
        latest_close = historical_data['Close'].iloc[-1]
        print(f"{ticker} has a negative trend with a latest close of ${latest_close:.2f}.")
        negative_trend_stocks.append((ticker, latest_close))

print("\nStocks with a negative historical trend:")
for stock, price in negative_trend_stocks:
    print(f"{stock}: ${price:.2f}")

percentage_negative = len(negative_trend_stocks) / len(all_stocks) * 100
print(f"\nPercentage of stocks with a negative trend: {percentage_negative:.2f}%")
